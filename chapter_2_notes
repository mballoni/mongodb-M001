# Mongo Shell connection to replica cluster

mongo "mongodb://cluster0-shard-00-00-jxeqq.mongodb.net:27017,cluster0-shard-00-01-jxeqq.mongodb.net:27017,cluster0-shard-00-02-jxeqq.mongodb.net:27017/test?replicaSet=Cluster0-shard-0" --authenticationDatabase admin --ssl --username m001-student --password m001-mongodb-basics

## Show collections

show collections

## change database

use videos

## Execute query

db.movies.find().pretty()
db.movies.find({"genre":"Documentary"}).pretty()


# Create collection

https://docs.mongodb.com/manual/reference/method/db.createCollection/

db.createCollection(name, options)



# Atlas
 * https://cloud.mongodb.com/v2/5c369997f2a30bdaf01230cb#clusters

## Credentials
 * user: ballonovisk
 * pass: nwxD3BW1qn4epKcM

## Connection
mongo "mongodb+srv://balloni-mongodb-tapyn.mongodb.net/test" --username ballonovisk

mongo "mongodb://balloni-mongodb-shard-00-00-tapyn.mongodb.net:27017,balloni-mongodb-shard-00-01-tapyn.mongodb.net:27017,balloni-mongodb-shard-00-02-tapyn.mongodb.net:27017/test?replicaSet=Balloni-mongodb-shard-0" --ssl --authenticationDatabase admin --username ballonovisk --password nwxD3BW1qn4epKcM


## show databases
show dbs

## Exit

quit()

## Execute JS dataset:

load("dataset.js")

## Insert
db.[collection].insertOne([document])

db.movies.insertOne({title: 'Star Trek II: The Wrath of Khan', year: 1982, imdb: 'tt0084726'})


### Insert Many

db.[collection].insertMany([documents...], options)

db.movies.insertMany([
{title: 'Star Trek II: The Wrath of Khan', year: 1982, imdb: 'tt0084726'},
{title: 'Star Trek II: The Wrath of Khan', year: 1982, imdb: 'tt0084726'},
{title: 'Star Trek II: The Wrath of Khan', year: 1982, imdb: 'tt0084726'},
{title: 'Star Trek II: The Wrath of Khan', year: 1982, imdb: 'tt0084726'}
], {"ordered":false})

## Find into inner documents

* {'wind.direction.angle': 290}

* {'awards.wins': 2,'awards.nominations': 2.0 }

* {'rated': "PG",'awards.nominations': 10.0}


## Find into arrays

### Exactly
 db.movies.find({cast: ["Jeff Bridges","Tim Robbins"]})

### Contains
 db.movies.find({cast: "Jeff Bridges"}).pretty()

### Nth position
 db.movies.find({"cast.0": "Jeff Bridges"}).pretty()



## Projection

### Includes only
 db.movies.find({"genre": "Action"}, {title: 1}).pretty()

### Excludes
 db.movies.find({"genre": "Action"}, {title: 1, _id: 0}).pretty()

### Excludes only
 db.movies.find({"genre": "Action"}, {_id: 0}).pretty()


## Update
 Modifies only the first on matched
 db.movieDetails.updateOne({title: "The Martian"},{$set: {poster: "blablabla..."} })

### Update Operators
 https://docs.mongodb.com/manual/reference/operator/update/

## Update Many
 Modifies all matches

## Upsert
 Adds if absent, updates if present
 db.movieDetails.updateOne({title: "The Martian"},{$set: {poster: "blablabla..."}},{upsert: true})


## Replace

 db.movieDetails.replaceOne(filter, doc)


## $in
{writers:{$in: ["Ethan Coen","Joel Coen"]}}

## $exists
{atmosphericPressureChange: {$exists: false}}


## Logical operators

db.movieDetails.find({$or: [{"tomato.meter": {$gt: 95}},                               
                            {"metacritic": {$gt: 88}}]},
                     {_id: 0, title: 1, "tomato.meter": 1, "metacritic": 1})

db.movieDetails.find({$and: [{"tomato.meter": {$gt: 95}},                               
                            {"metacritic": {$gt: 88}}]},
                     {_id: 0, title: 1, "tomato.meter": 1, "metacritic": 1})

db.movieDetails.find({"tomato.meter": {$gt: 95},                               
                      "metacritic": {$gt: 88}},
                     {_id: 0, title: 1, "tomato.meter": 1, "metacritic": 1})

db.movieDetails.find({$and: [{"metacritic": {$ne: null}},
                             {"metacritic": {$exists: true}}]},
                          {_id: 0, title: 1, "metacritic": 1})

db.movieDetails.find({$and: [{"metacritic": null},
                             {"metacritic": {$exists: true}}]},
                     {_id: 0, title: 1, "metacritic": 1})

{$and: [{tripduration: {$exists: true}}, {tripduration: null}]}

{$or: [{depth: 0}, {watlev: "always dry"}]}

## $all

db.movieDetails.find({genres: {$all: ["Comedy", "Crime", "Drama"]}}, 
                     {_id: 0, title: 1, genres: 1}).pretty()

{sections: {$all: ["AG1", "MD1", "OA1"]}}


## $size

db.movieDetails.find({countries: {$size: 1}}).pretty()


## $elemMatch

{results: {$elemMatch: {$gte: 70, $lt: 80 }}}

db.scores.find(
   { results: { $elemMatch: { $gte: 80, $lt: 85 } } }
)

{ results: { $elemMatch: {product: "abc", score: 7}}}

{ results: { $elemMatch: {product: "abc", score: {$lte: 1}}}}


## Regex

db.movieDetails.find({}, {_id: 0, "title": 1, "awards.text": 1}).pretty()

db.movieDetails.find({"awards.text": {$regex: /^Won.* /}}, {_id: 0, title: 1, "awards.text": 1}).pretty()





{$and: [{cast: {$in: ["Jack Nicholson", "John Huston"]}}, {viewerRating: {$gt: 7}}, {mpaaRating: "R"}  ]}

